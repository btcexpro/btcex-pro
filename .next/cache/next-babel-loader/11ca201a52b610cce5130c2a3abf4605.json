{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\n\nvar Index = function Index(props) {\n  return __jsx(Layout, null, __jsx(\"h1\", null, \"Batman TV Show\"), props.shows.map(function (show, index) {\n    return __jsx(\"li\", {\n      key: show.id\n    }, __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(show.id)\n    }, __jsx(\"a\", null, show.name)));\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/amrendra/Desktop/btcex-pro/pages/index.js"],"names":["Link","fetch","Layout","Index","props","shows","map","show","index","id","name","getInitialProps","res","json","data","entry"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SACjB,MAAC,MAAD,QACE,mCADF,EAEGA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP;AAAA,WACf;AAAI,MAAA,GAAG,EAAED,IAAI,CAACE;AAAd,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAAQF,IAAI,CAACE,EAAb;AAAvB,OACE,iBAAIF,IAAI,CAACG,IAAT,CADF,CADF,CADe;AAAA,GAAhB,CAFH,CADiB;AAAA,CAAnB;;AAaAP,KAAK,CAACQ,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJV,KAAK,CAAC,8CAAD,CADD;;AAAA;AAChBW,UAAAA,GADgB;AAAA;AAAA,2CAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAAA,2CAIf;AACLT,YAAAA,KAAK,EAAES,IAAI,CAACR,GAAL,CAAS,UAAAS,KAAK;AAAA,qBAAIA,KAAK,CAACR,IAAV;AAAA,aAAd;AADF,WAJe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AASA,eAAeJ,KAAf","sourcesContent":["import Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nimport Layout from '../components/Layout';\n\nconst Index = props => (\n  <Layout>\n    <h1>Batman TV Show</h1>\n    {props.shows.map((show, index) => (\n      <li key={show.id}>\n        <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n          <a>{show.name}</a>\n        </Link>\n      </li>\n    ))}\n  </Layout>\n);\n\nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  return {\n    shows: data.map(entry => entry.show)\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}